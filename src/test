parser = ap.ArgumentParser(description='PreQual (dtiQA v7 Multi) v{}: An automated pipeline for integrated preprocessing and quality assurance of diffusion weighted MRI images. For citation, user guide, and license, please visit github.com/MASILab/PreQual. Created {}.'.format(SHARED_VARS.VERSION, SHARED_VARS.CREATION_DATE))
    parser.add_argument('in_dir', help='A path to the INPUTS directory that must contain dtiQA_config.csv')
    parser.add_argument('out_dir', help='A path to the OUTPUTS directory')
    parser.add_argument('pe_axis', help='Phase encoding axis (direction agnostic) (i.e. i or j)')
    parser.add_argument('--bval_threshold', metavar='N', default='50', help='Non-negative integer threshold under which to consider a b-value to be 0 (default = 50)')
    parser.add_argument('--nonzero_shells', metavar='s1,s2,...,sn/auto', default='auto', help='Comma separated list of positive integers indicating nonzero shells for SNR/CNR analysis when there are more unique b-values than shells determined by eddy or automatically determine shells by rounding to nearest 100 (default = auto)')
    parser.add_argument('--denoise', metavar='on/off', default='on', help='Denoise images prior to preprocessing (default = on)')
    parser.add_argument('--degibbs', metavar='on/off', default='off', help='Remove Gibbs ringing artifacts from MRI images (default = off)')
    parser.add_argument('--rician', metavar='on/off', default='off', help='Perform Rician noise correction with method of moments (default = off)')
    parser.add_argument('--prenormalize', metavar='on/off', default='on', help='Normalize intensity distributions before preprocessing (default = on)')
    parser.add_argument('--synb0', metavar='raw/stripped/off', default='raw', help='Run topup with a synthetic b0 generated with Synb0-DisCo if no reverse phase encoded images are supplied and a raw or skull stripped T1 is supplied (default = raw)')
    parser.add_argument('--topup_first_b0s_only', action='store_true', help='Run topup with only the first b0 of each image when images have >1 b0 volume (default = run with ALL b0 volumes)')
    parser.add_argument('--extra_topup_args', metavar='string', default='', help='Extra arguments to pass to topup as a list separated by +\'s with no spaces (i.e., --extra_topup_args=--scale=1+--regrid=0)')
    parser.add_argument('--eddy_cuda', metavar='8.0/9.1/off', default='off', help='Run eddy with CUDA 8.0 or 9.1 or without GPU acceleration and with OPENMP only (default = off)')
    parser.add_argument('--eddy_mask', metavar='on/off', default='on', help='Use a brain mask for eddy (default = on)')
    parser.add_argument('--eddy_bval_scale', metavar='N/off', default='off', help='Positive number with which to scale b-values for eddy only in order to perform distortion correction on super low shells (default = off)')
    parser.add_argument('--extra_eddy_args', metavar='string', default='', help='Extra arguments to pass to eddy as a list separated by +\'s with no spaces (i.e., --extra_eddy_args=--data_is_shelled+--ol_nstd=1)')
    parser.add_argument('--postnormalize', metavar='on/off', default='off', help='Normalize intensity distributions after preprocessing (deprecated, default = off)')
    parser.add_argument('--correct_bias', metavar='on/off', default='off', help='Perform N4 bias field correction as implemented in ANTS (default = off)')
    parser.add_argument('--improbable_mask', metavar='on/off', default='off', help='Create an additional mask on the preprocessed data that omits voxels where the minimum b0 signal is smaller than the minimum diffusion weighted signal (default = on)')
    parser.add_argument('--glyph_type', metavar='tensor/vector', default='tensor', help='In the QA document, visualize the tensor model either as glyphs of the full tensors or as glyphs of the principal eigenvector (default = tensor)')
    parser.add_argument('--atlas_reg_type', metavar='FA/b0', default='FA', help='Register to the JHU atlas by using the subject FA map or the subject average preprocessed b0 (default = FA)')
    parser.add_argument('--split_outputs', action='store_true', help='Split preprocessed output to match structure of input files (default = do NOT split)')
    parser.add_argument('--keep_intermediates', action='store_true', help='Keep intermediate copies of data (default = do NOT keep)')
    parser.add_argument('--num_threads', metavar='N', default=1, help='Non-negative integer indicating number of threads to use when running multi-threaded steps of this pipeline (default = 1)')
    parser.add_argument('--project', metavar='string', default='proj', help='Project ID (default = proj)')
    parser.add_argument('--subject', metavar='string', default='subj', help='Subject ID (default = subj)')
    parser.add_argument('--session', metavar='string', default='sess', help='Session ID (default = sess)')
    args = parser.parse_args()
